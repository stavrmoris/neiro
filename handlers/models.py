from datetime import datetime

import utils.database as db
import whisper
import os

from pydub import AudioSegment
from aiogram import Router, F, Dispatcher, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from config import CHANEL_ID
from utils.dalle import image_generate
from utils.gpt4o import text_generate
from states.states import States

# model = whisper.load_model("base")


async def neiro_create(message: Message, state: FSMContext, bot: Bot):
    user_id = message.chat.id

    prompt = message.text

    # if message.voice:
    #     # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #     voice = message.voice
    #     file_id = voice.file_id
    #     file = await bot.get_file(file_id)
    #     file_path = file.file_path
    #
    #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    #     downloaded_file = await bot.download_file(file_path)
    #     ogg_file_path = f"tmp_voice/voice_message_{user_id}.ogg"
    #     with open(ogg_file_path, "wb") as f:
    #         f.write(downloaded_file.read())
    #
    #     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º .ogg –≤ .wav —Å –ø–æ–º–æ—â—å—é pydub
    #     audio = AudioSegment.from_file(ogg_file_path, format="ogg")
    #     wav_file_path = f"tmp_voice/converted_{user_id}.wav"
    #     audio.export(wav_file_path, format="wav")
    #
    #     # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper
    #     result = model.transcribe(wav_file_path)
    #     prompt = result["text"]
    #     print(prompt)
    #     os.remove(ogg_file_path)
    #     os.remove(wav_file_path)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –ª–∏–º–∏—Ç–∞—Ö
    neiro = db.get_variable(user_id, 'neiro')
    usage_data = {
        'gpt-4o': db.get_variable(user_id, 'gpt4o-usage'),
        'gpt-4o-mini': db.get_variable(user_id, 'gpt4omini-usage'),
        'dall-e-3': db.get_variable(user_id, 'dalle-usage'),
    }

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    generate_functions = {
        'gpt-4o': text_generate,
        'gpt-4o-mini': text_generate,
        'dall-e-3': image_generate,
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    msg = await message.answer('‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if neiro in usage_data and usage_data[neiro] is not None:
        if int(usage_data[neiro]) > 0:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if neiro in ['gpt-4o', 'gpt-4o-mini']:
                answer = await text_generate(user_id, prompt, neiro)
                text_splits = split_text_naturally(answer)
                for split in text_splits:
                    await message.answer(split)
            elif neiro == 'dall-e-3':
                answer = await generate_functions[neiro](user_id, prompt)
                await message.answer_photo(answer)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å", callback_data='neiro')],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='start')],
            ])

            now = datetime.now()
            date_str = db.get_variable(user_id, 'data')
            date_to_compare = datetime.strptime(date_str, "%Y-%m-%d").date()
            if date_str is not None and now.date() <= date_to_compare:
                await message.answer('üò¢ –ü–æ—Ö–æ–∂–µ –≤–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å', reply_markup=keyboard)
            else:
                await message.answer('üò¢ –ü–æ—Ö–æ–∂–µ –≤–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∏—Ö —á–∏—Å–ª–æ - –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='sub')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='start')],
        ])
        await message.answer('üò¢ –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', reply_markup=keyboard)
    await msg.delete()


async def clear_context(message: Message):
    user_id = message.chat.id
    db.clear_message_history(user_id)
    await message.answer('üéâ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!')


async def photo(message: Message):
    await message.answer('üì∏ –ò–∑–≤–∏–Ω—è–µ–º—Å—è, –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ :(')


def split_text_naturally(text, max_length=4000):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤, —É—á–∏—Ç—ã–≤–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–∫–æ–Ω—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).

    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.
    :param max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4000 —Å–∏–º–≤–æ–ª–æ–≤).
    :return: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞.
    """
    parts = []
    while len(text) > max_length:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_length —Å–∏–º–≤–æ–ª–æ–≤
        chunk = text[:max_length]
        last_sentence_end = max(
            chunk.rfind("."),
            chunk.rfind("!"),
            chunk.rfind("?")
        )

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ max_length
        if last_sentence_end == -1:
            last_sentence_end = max_length

        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        part = text[:last_sentence_end + 1].strip()
        parts.append(part)

        # –û–±—Ä–µ–∑–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text = text[last_sentence_end + 1:].strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    if text:
        parts.append(text.strip())

    return parts


def router(rt: Router):
    rt.message.register(clear_context, Command("reset"))
    rt.message.register(neiro_create, States.waiting_for_prompt, F.text)
    rt.message.register(neiro_create, States.waiting_for_prompt, F.voice)
    rt.message.register(photo, States.waiting_for_prompt, F.photo)
