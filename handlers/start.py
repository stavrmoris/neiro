import utils.database as db

from aiogram import Router, F, Dispatcher, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from config import CHANEL_ID
from utils.check_in_chanel import check_in_chanel
from states.states import States


async def msg_start(message: Message, state: FSMContext, bot: Bot):
    user_id = message.chat.id

    db.add_user_to_list(user_id)

    if db.get_variable(user_id, 'neiro') is None or db.get_variable(user_id, 'neiro') == '':
        db.set_variable(user_id, 'neiro', 'gpt-4o-mini')

    if await check_in_chanel(bot, user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANEL_ID}")],
            [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='start')]
        ])
        await message.answer('''ü§ñ –≠—Ç–æ *–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. 

‚ùó–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/epichero_dev).''', reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='sub'),
             InlineKeyboardButton(text="ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏", callback_data='neiro')],
            [InlineKeyboardButton(text="üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/stavrmoris")],
        ])
        neiro = db.get_variable(user_id, 'neiro')
        neiro_txt = '*GPT-4o*'
        if neiro == 'gpt-4o-mini':
            neiro_txt = '*GPT-4o mini*'
        elif neiro == 'dall-e-3':
            neiro_txt = '*Flux*'

        gpt4o_usage = db.get_variable(user_id, 'gpt4o-usage')
        dalle_usage = db.get_variable(user_id, 'dalle-usage')
        gpt4omini_usage = db.get_variable(user_id, 'gpt4omini-usage')
        if gpt4o_usage is None:
            gpt4o_usage = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞'
        if dalle_usage is None:
            dalle_usage = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞'
        if gpt4omini_usage is None:
            gpt4omini_usage = db.set_variable(user_id, 'gpt4omini-usage', 30)
        else:
            if int(gpt4omini_usage) > 30:
                gpt4omini_usage = '‚ôæÔ∏è'

        await message.answer(f'''
ü§ñ –≠—Ç–æ *–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–¥–≤–æ–µ, –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏, —Ç–µ–º —Å–∞–º—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –ø–∏—à–∏—Ç–µ @stavrmoris —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç–æ–º.

‚ú¥Ô∏è –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:
‚≠ê *GPT-4o mini*: {gpt4omini_usage};
‚≠ê *GPT-4o*: {gpt4o_usage};
‚≠ê *Flux*: {dalle_usage}.

‚ú≥Ô∏è –¢–µ–∫—É—â–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å: {neiro_txt}

üëá –î–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!''', reply_markup=keyboard)
        await state.set_state(States.waiting_for_prompt)


async def call_start(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = call.message.chat.id

    db.add_user_to_list(user_id)

    await call.message.delete()
    if await check_in_chanel(bot, user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANEL_ID}")],
            [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='start')]
        ])
        await call.message.answer('''ü§ñ –≠—Ç–æ *–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. 

‚ùó–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/epichero_dev).''', reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='sub'),
             InlineKeyboardButton(text="ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏", callback_data='neiro')],
            [InlineKeyboardButton(text="üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/stavrmoris")],
        ])
        neiro = db.get_variable(user_id, 'neiro')
        neiro_txt = '*GPT-4o*'
        if neiro == 'gpt-4o-mini':
            neiro_txt = '*GPT-4o mini*'
        elif neiro == 'dall-e-3':
            neiro_txt = '*Flux*'

        gpt4o_usage = db.get_variable(user_id, 'gpt4o-usage')
        dalle_usage = db.get_variable(user_id, 'dalle-usage')
        gpt4omini_usage = db.get_variable(user_id, 'gpt4omini-usage')
        if gpt4o_usage is None:
            gpt4o_usage = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞'
        if dalle_usage is None:
            dalle_usage = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞'
        if gpt4omini_usage is None:
            gpt4omini_usage = db.set_variable(user_id, 'gpt4omini-usage', 30)
        else:
            if int(gpt4omini_usage) > 30:
                gpt4omini_usage = '‚ôæÔ∏è'

        await call.message.answer(f'''
ü§ñ –≠—Ç–æ *–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–¥–≤–æ–µ, –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏, —Ç–µ–º —Å–∞–º—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –ø–∏—à–∏—Ç–µ @stavrmoris —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç–æ–º.

‚ú¥Ô∏è –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:
‚≠ê *GPT-4o mini*: {gpt4omini_usage};
‚≠ê *GPT-4o*: {gpt4o_usage};
‚≠ê *Flux*: {dalle_usage}.

‚ú≥Ô∏è –¢–µ–∫—É—â–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å: {neiro_txt}

üëá –î–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!''', reply_markup=keyboard)
        await state.set_state(States.waiting_for_prompt)


def router(rt: Router):
    rt.message.register(msg_start, CommandStart())
    rt.callback_query.register(call_start, F.data == 'start')
